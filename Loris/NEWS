Loris -- History of visible changes.

Loris is Copyright (C) 1999-2001 by Kelly Fitz and Lippold Haken 
<loris@cerlsoundgroup.org>.
See the end for copying conditions.

Please send Loris bug reports to loris@cerlsoundgroup.org.
-------------------------------------------------------
changes since 1.0.2 release:

- added window sidelobeLevel parameter to Analyzer, 
decoupled it from the amplitude floor.

- bandwidth (noise) association can now be disabled in 
Analyzer by setting bwRegionWidth to 0.

- softened amplitude floor in Analyzer, now amplitudes 
near (within 10dB) of the amplitude floor are faded out,
instead of suddenly being eliminated at the threshold

-------------------------------------------------------
changes since 1.0.1 release:

- moved compile-time type checks from FourierTransform.C
to configure.in, so the former now compiles even with 
wimpy compilers

- added check for template member support to configure.in

- changed name of (Python) loriscmodule to _loris, to
keep up with changes to SWIG

- added "collating" of unlabeled Partials to the
distillation operation. This combines unlabeled Partials
into groups of non-overlapping (in time) Partials, assigned
an unused label (greater than the label associated with any
frequency channel), and fused into a single Partial per
group. "Collating" is a bit like "sifting" but
non-overlapping Partials are grouped without regard to
frequency proximity. This algorithm produces the
smallest-possible number of collated Partials. Thanks to
Ulrike Axen for providing this optimal algorithm.

- Perl module can now be built, optionally, with the 
--with-perl option to configure. It is still untested,
but a very minimal test is performed in make check,just
to make sure that it can be loaded. The perl module
is (temporarily) called perLoris.

- Python sequences can be used as arguments to dilate, 
other languages still need strings, but typemaps could
be added for them too.

- autodetection of scripting langauges has been improved

-------------------------------------------------------
changes since 1.0 release:

- added compile-time checks to ensure that fftw_complex
is compatible with std::compelx<double>, in 
FourierTransform.C.

- fixed sloppy coding (bad use of vector iterators to get
pointers) that caused compile errors under new versions
of CodeWarrior and gcc (3).

- added prebinding to Darwin build, though it won't
do anything until prebound versions of SDIF and FFTW
are available.

- removed old Mac OS project files, etc, since they
were never up-to-date anyway, and too difficult to 
maintain.

-------------------------------------------------------
changes since 1.0beta9 release:

- Updated documentation (finally) including C++
API documentation (finally).

- added assignment operator to Oscillator so that STL
containers of them can be used

- made FrequencyReference a subclass (implementor) of 
the Envelope interface, restricted access to its 
BreakpointEnvelope to const.

- made FrequencyReference use all Breakpoints in the 
reference Partial when the number of samples is not
specified.

- Sieve no longer sorts Partial list, and therefore no
longer needs the list itself as an argument to sift(),
can pass just iterators.

- Greatly improved the Sieve interface, made it generic
(container-type independent).

- Morpher interface radically improved to expose much 
more morphing functionality. 

- Added PartialPtrs class, a container of pointers to 
Partials, used internally to make algorithms more generic.

- Removed FadeTime() member from class Partial, added fade 
time as a parameter to classes Distiller, Synthesizer, and
Sieve (replacing minGapTime, which is twice the fade time).

-------------------------------------------------------
changes since 1.0beta8 release:

- fixed Dilator to insert Breakpoints in new Partials at 
times corresponding to dilation target time points. Without
these new Breakpoints, and since our Breakpoints are 
non-uniformly distributed in time, Partials could go
breifly out of tune with each other as a result of 
dilation.

- added PartialList.h defining the type PartialList as
a name for std::list< Partial >, in the Loris namespace.

- replaced all instances of #if HAVE_M_PI with 
#if defined(HAVE_M_PI) && (HAVE_M_PI), which seems 
better.

- put everything in procedural interface (loris.h) in
Loris namespace, when compiling C++.

-------------------------------------------------------
changes since 1.0beta7 release:

- fixed phase error in SpcFile.C, introduced by replacing
TwoPi symbol by 2. * Pi in the denominator without proper
parenthesis.

- eliminated many spurious compiler warnings

- improved error handling and reporting in SDIF reading

- autobuilding of Loris library and the Python module 
under Darwin is now possible

- added version symbols in loris.h (automatically generated
by automake) and a version() function in the scripting interface
(returns a version string)

- Totally new SDIF file format -- we now define our own 
matrix types so that we can read and write our partials,
even if we label them (!), which was not previously possible
due to silliness with the SDIF library. Optionally, 1TRC
files can still be exported, but they are the sine-only 
ones that are described by the SdifTypes.STYP file. Our 
matrices contain irregularly-spaced bandwidth-enhanced
data, but no interpolated (bogus) data, so a frame may 
not contain breakpoints for all active Partials.

- Simplified loris.h slightly by removing the silly
LORIS_OPAQUE_POINTERS symbol, whose purpose is a mystery.

- Cleaned up the SWIG interface somewhat to reflect modern
developments in SWIG (like the elimination of the documentation
facility).

- Analyzer can be constructed and configured with two 
parameters now, the frequency resolution and the width
of the analysis window. It seems that most commonly,
those parameters need to be set independently, and
other parameters derived from them. The single-argument
version of configure() no longer exists, but can be
simulated by calling configure() with two identical 
arguments.

- The configure method in the Analyzer scripting interface
has been removed (just create a new Analyzer when you need
to reconfigure). analyzer_configure() has been removed from 
the procedural interface, as has the single-argument version
of createAnalyzer(). In the scripting interface, the Analyzer
constructor can be called with a single argument, and the
window width will be set equal to the specified resolution.

- Analysis configures the analysis window to have sidelobe
attenuation equal to the amplitude floor, instead of always
using 95 dB. The amplitude floor still defaults to 90 dB.

- KaiserWindow::computeLength() now takes the Kaiser shaping
parameter as its second parameter, instead of the attenuation
(from which it computes the shaping parameter).

- Added spliceByLabel() to procedural interface, for splicing
Partials having a specified label into a separate list.

- Added extractLabeled( PartialList *, label ) to the
scripting interface, returns Partials having the specified
label in a new PartialList.

- Added PartialUtils::timeSpan(iterator, iterator) to 
find the time spanned by all Partials in an iterator
range. Used this to implement a timeSpan method for
PartialList in the scripting interface.

- Removed all the preprocessor scaffolding involving 
NO_LORIS_NAMESPACE, since it offered only a false sense
of security. There's no reason to believe that Loris will
build with a compiler that is not namespace-savvy.

- Added default values for sample rate (44100) in synthesize
and exportAiff, and for number of channels (1) and 
sample size (16 bits) in exportAiff in scripting interface.

- Fixed Distiller to correctly preserve Partials with label 0.

- Improved efficiency and consistency of Sieve and sifting operation,
and added default gap equal to 0.

- FrequencyReference class can be constructed with a specified
number of samples of the longest Partial's frequency envelope
(the old way) or sampled every 30ms (the recent way). In the
procedural interface, specifying a number of samples equal
to 0 causes the 30ms sampling. In the scripting interface,
the number of samples argument is optional, and if unspecified,
the 30 ms sampling is used. In the scripting and procedural 
interfaces, the number of samples is the last argument to
createFreqReference(), whereas is used to be the third. THIS
MAY BREAK OLD CODE.

-------------------------------------------------------
changes since 1.0beta6 release:

- Improved Distiller operation.

- Changed iterator behavior in scripting interface (NOTE: this 
may break previously-working code!) next and prev methods
for PartialIterators and PartialListIterators no longer advance
and return themselves, they now return a new iterator at the
next/prev position, more like pointers, less like STL iterators,
easier to use.

- Improvements and cleanup in Analyzer, Filter, Oscillator,
FourierTransform, Synthesizer.

- Updated Mac project for CW7 and carbon.

- Added FrequencyReference class.

- Improved autoconfiguration.

-------------------------------------------------------
changes since 1.0beta5 release:

- The ReassignedSpectrum class has been modified to compute
the reassignment data using fewer transforms, and thus to 
run faster. 

- The files used by the GNU autotools to generate distribution
tarballs have been modified to include Mac OS-specific files in
the full source distribution.

-------------------------------------------------------
changes since 1.0beta4 release:

- The Distiller now incorporates the formerly-experimental sifting
process, that had been implemented in the Sieve class, which is 
now obsolete. The sifting process now is more predictable: it retains
the longest Partial of an overlapping pair, instead of the first one
it encountered.

- Loris has been autoconfiscated. This is a first attempt to use
the GNU autotools to configure Loris for Unix and Linux (and
windows?) builds.

- Loris and FFTW are now separate CodeWarrior projects for Mac 
build. Both are distributed as XML exports.

- Loris now requires release 3.4 or later of the SDIF library 
from IRCAM. Earlier versions had problems that prevented Loris
from using them as intended.

- The Loris demo and Loris Mac source releases have 
been terminated. The demo is now attached to the Loris
web page (www.cerlsoundgroup.org/Loris), and the Mac
source is now incldued with the full source distribution.

-------------------------------------------------------
changes since 1.0beta3 release:

- Tcl and Perl interfaces and documentation have been added to the
scripting support. The Tcl module can be tested using the morphtest.tcl
script in the test directory. The Perl module has not been tested yet
and is awaiting a competent Perl programmer to provide a Perl version of
the test script.

- the macro LORIS_VERSION has been added to a prefix file included in
all Loris headers and sources. So it is now possible to determine the
Loris release version programmatically and at compile time. See the
header Loris_prefix.h for a description of the format of this macro. The
Loris version is also accessible using the versionString function in the
scripting interface.

- the PartialList and Partial iterators in the scripting interface have
been rewritten and now mimic the C++ STL classes they wrap. Most
importantly, iterators do _no_ memory or reference management. So that
in Python, if you loose the last reference to a PartialList and the list
gets deleted, you may be left with invalid Partials, Iterators, and
Breakpoints, that formerly corrsponded to contents of that PartialList.
See the documentation for more details. This implementation is very
different from the implementation in release 1.0beta3, but is more or
less the one that we expect to stick with.

- the non-object functions in the scripting interface for accessing AIFF
format sample files (ImportAiff, and infoAiff) have been removed. Use the 
AiffFile class added in the previous release. See the test and demo scripts
for examples.

- the ExportSpc class has been removed from the scripting interface and
replaced by non-object importSpc and exportSpc functions. See the
documenation for details. In the C++ class library the ExportSpc class
has been replaced by the SpcFile class, the ImportSdif and ExportSdif
classes have been replaced by the SdifFile class.

- the CodeWarrior project itself is no longer distributed for the MacOS.
Instead, the exported XML description is distributed. This file can be
used to build (mostly) a CodeWarrior project using any recent version of
the IDE, using the Import Project option on the File menu.

-------------------------------------------------------
change since 1.0beta2 release:

- preliminary implementation of PartialList iteration and access to
individual Partials in a PartialList in the scripting interface. This
implementation is incomplete and experimental, and should be expected
to change.

- AiffFile class added to scripting interface, so there is no longer a
separate function (and disk access) for querying the sample rate, bit
depth, and number of channels in a samples file. These parameters are
now obtained from an AiffFile object that also provides access to the
SampleVector.

- Sieve class has been added to Loris class library, invoked through
sift() function in the scripting interface. The sifting operation is
an experimental process that sometimes improves the fidelity of morphs
and syntheses from distilled PartialLists. Sifting is performed after
channelization and before distillation, and has the effect of
relabeling some Partials to zero (0). These Partials are left behind
unmodified by the distillation process, and can be removed from the
PartialList, or retained and synthesized. (Partials labeled zero do
not participate in morphing, they are instead faded in and out.) This
implementation is experimental and should be expected to change.

- errors in test and demo scripts have been fixed.

- Python interface documentation has been updated and improved.

- updated to use the version 3.2.2 of the SDIF library from IRCAM,
obtain from the IRCAM SDIF website (www.ircam.fr/sdif). This version
is incompatible with version 3.2.0, used in by earlier Loris releases.
Update to version 3.2.2, or compile with the flag SDIF_VERSION defined
to have the value 320 to use version 3.2.0 of the SDIF library. See
the README file or more information.

- SWIG 1.3a5 is being used to generate the Python wrappers now, so
anyone wishing to try generating wrappers for other languages can now
choose from Java, Guile, Ruby, and others, in addition to Tcl and Perl.

- other minor changes in the scripting interface, see the demo and
test scripts for examples. 

-------------------------------------------------------
change since 1.0beta1 release:

- added .spc file support for real-time bandwidth-enhanced additive
synthesis and sound morphing using the Symbolic Sound Kyma System.
Documentation updated accordingly (though not very extensive).

- Loris module tested and verified with Python 2.0, now the default
build (to build or another Python release, change the Makefile, or,
in the MacOS Codewarrior project, the Access Path, to reflect the 
correct version number).

- static library target added to Codewarrior project for MacOS.

- MacOS Python module now uses a static library instead of a shared 
libarary (DLL), since static libraries seem much more stable and are
less restrictive. (This should alleviate some instability related to
memory management across library boundaries.)

- test directory has been added with the simple morph test, distinct
from the longer test in the demo directory (and package).

-------------------------------------------------------
changes since 1.0alpha release:

- the core Loris library is mostly unchanged from the alpha release,
but the scripting interface has been completely rewritten to provide
a generic interface to a variety of scriping languages using SWIG
(www.swig.org) At this time, only the Python module has been
tested, and only with Python 1.5.2, though Loris is also reported to
work with Python 1.6.

- a c-linkable procedural interface has been implemented.

- a first-cut of (html) documentation for the procedural interface and
for the Python module is included, and posted to SourceForge
(sourceforge.net/projects/loris).

-------------------------------------------------------
Copying information:

Copyright (C) 1999-2001, Kelly Fitz and Lippold Haken 
<loris@cerlsoundgroup.org>

   Permission is granted to anyone to make or distribute verbatim copies
   of this document as received, in any medium, provided that the
   copyright notice and this permission notice are preserved,
   thus giving the recipient permission to redistribute in turn.

   Permission is granted to distribute modified versions
   of this document, or of portions of it,
   under the above conditions, provided also that they
   carry prominent notices stating who last changed them.

