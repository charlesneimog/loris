dnl Copyright (C) 1999-2001, Kelly Fitz and Lippold Haken <loris@cerlsoundgroup.org>
dnl  
dnl This file is free software; as a special exception the author gives
dnl unlimited permission to copy and/or distribute it, with or without 
dnl modifications, as long as this notice is preserved.
dnl 
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
dnl implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

AC_INIT(pi/loris.h.in)

AC_CONFIG_AUX_DIR(config)
AC_SUBST(ac_aux_dir)

dnl----------------------------------------------------------------
dnl Package Name And Version
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Package Name And Version -----)
PACKAGE=loris
LORIS_MAJOR_VERSION=1
LORIS_MINOR_VERSION=0
LORIS_SUBMINOR_VERSION=1
LORIS_PRERELEASE_STR=
VERSION_STR="$LORIS_MAJOR_VERSION"."$LORIS_MINOR_VERSION"."$LORIS_SUBMINOR_VERSION""$LORIS_PRERELEASE_STR"
AM_INIT_AUTOMAKE("$PACKAGE","$VERSION_STR")
AC_MSG_RESULT(this is $PACKAGE-$VERSION_STR)

AC_SUBST(LORIS_MAJOR_VERSION)
AC_SUBST(LORIS_MINOR_VERSION)
AC_SUBST(LORIS_SUBMINOR_VERSION)
AC_SUBST(VERSION_STR)

AM_CONFIG_HEADER(config.h)

dnl----------------------------------------------------------------
dnl Checks for programs.
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Program Checks -----)
dnl LF_CONFIGURE_CC
dnl LF_CONFIGURE_CXX
dnl LF_HOST_TYPE
dnl LF_SET_WARNINGS
AC_PROG_CXX

AM_PROG_LIBTOOL

dnl----------------------------------------------------------------
dnl Perform special libtool checks under Darwin.
dnl----------------------------------------------------------------

AC_DEFUN([PATCH_LIBTOOL_ON_DARWIN_ZSH_OVERQUOTING],
[# libtool-1.4 specific, on zsh target the final requoting does one too much
case "$host_os" in
  darwin*)
    if grep "1.920" libtool ; then
AC_MSG_RESULT(patching libtool on .so-sharedlib creation (zsh overquoting))
      test -f libtool.old || (mv libtool libtool.old && cp libtool.old libtool)
      sed -e '/archive_cmds=/s:\\\\":\\":g' libtool > libtool.new
      mv libtool.new libtool
      test -f libtool || (test -f libtool.old && mv libtool.old libtool)
    fi
  ;;
esac
])
PATCH_LIBTOOL_ON_DARWIN_ZSH_OVERQUOTING

AC_DEFUN([KELLYS_GREAT_DARWIN_FIX],
[# libtool just won't build the scripting modules under Darwin, do it by hand
case "$host_os" in
  *darwin*)
	AC_MSG_RESULT(Using Darwin-specific kludges to avoid broken libtool.)
	DARWIN=true
	;;
esac
])

KELLYS_GREAT_DARWIN_FIX
AM_CONDITIONAL(DARWIN, test "$DARWIN")

dnl----------------------------------------------------------------
dnl Look for swig.
dnl
dnl If swig is available, then a target will be generated 
dnl for rebuilding the scripting wrappers.
dnl----------------------------------------------------------------

AC_PATH_PROG(SWIG, swig)
AM_CONDITIONAL(HAVE_SWIG, test -n "$SWIG")

dnl----------------------------------------------------------------
dnl Look for csound.
dnl
dnl If csound is available, then a message will be printed
dnl refering to the README in the csound directorya.
dnl----------------------------------------------------------------

AC_PATH_PROG(CSOUND, csound)
AM_CONDITIONAL(HAVE_CSOUND, test -n "$CSOUND")

dnl----------------------------------------------------------------
dnl Check for librairies
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Library Checks -----)

dnl----------------------------------------------------------------
dnl Look for IRCAM's SDIF package
dnl
dnl Allow args to configure for specifying the location of the
dnl SDIF package, since there are more than one such package in
dnl and we need specifically IRCAM's.
dnl----------------------------------------------------------------

SDIFINCLUDE=
SDIFLIB=
SDIFPACKAGE=
 
AC_ARG_WITH(sdif,[  --with-sdif=path        Set prefix of SDIF package],[
		SDIFPACKAGE="$withval"], [SDIFPACKAGE=])
AC_ARG_WITH(sdifincl,[  --with-sdifincl=path    Set path of SDIF include file],[
		SDIFINCLUDE="$withval"], [SDIFINCLUDE=])
AC_ARG_WITH(sdiflib,[  --with-sdiflib=path     Set path of SDIF library],[
		SDIFLIB="$withval"], [SDIFLIB=])

if test -z "$SDIFINCLUDE"; then
   if test -n "$SDIFPACKAGE"; then
        SDIFINCLUDE="$SDIFPACKAGE/include"
   fi
fi

if test -z "$SDIFLIB"; then
   if test -n "$SDIFPACKAGE"; then
        SDIFLIB="$SDIFPACKAGE/lib"
   fi
fi

dnl look for SDIF header in specified or standard locations
SDIF_H=sdif.h
if test -n "$SDIFINCLUDE"; then
	AC_MSG_CHECKING(for SDIF header file in $SDIFINCLUDE)
	if test -f "$SDIFINCLUDE/$SDIF_H" ; then
		AC_MSG_RESULT(found)
		SDIF_H="$SDIFINCLUDE/$SDIF_H"
	else
		AC_MSG_ERROR(cannot find SDIF header in $SDIFINCLUDE)
	fi
else
	AC_CHECK_HEADER($SDIF_H, :, AC_MSG_ERROR(cannot find SDIF header))
fi

dnl look for the SDIF library
if test -n "$SDIFLIB" ; then
	LIBS="$LIBS -L$SDIFLIB"
fi
AC_CHECK_LIB(sdif, SdifGenInit, :, AC_MSG_ERROR(cannot use SDIF library))

dnl make sure that we can figure out how to use
dnl the SDIF library
AC_MSG_CHECKING(SDIF release version (must be at least 3.4))
dnl should actually try running this, but these things weren't defined
dnl in earlier versions, so maybe it isn't worth the trouble
AC_TRY_COMPILE( [ #include<$SDIF_H> ], [
		assert( SDIF_VERSION_MAJOR >= 3 && SDIF_VERSION_MINOR >= 4 ); ],[ 
		AC_MSG_RESULT(ok)
		], [
		AC_MSG_ERROR(failed, please use at least SDIF-3.4) ] )

if test -n "$SDIFINCLUDE" ; then
	SDIFINCLUDE="-I$SDIFINCLUDE"
fi
AC_SUBST(SDIFINCLUDE)

dnl
dnl end of SDIF check
dnl----------------------------------------------------------------


dnl----------------------------------------------------------------
dnl Look for FFTW
dnl
dnl Remember that fftw library won't link without -lm.
dnl Allow an argument to specify the prefix of a non-installed
dnl FFTW package
dnl----------------------------------------------------------------

FFTWPACKAGE=
FFTWINCLUDE=
FFTW_H=fftw.h

AC_ARG_WITH(fftw,[  --with-fftw=path        Set prefix of (non-installed) FFTW  package],[
		FFTWPACKAGE="$withval"], [FFTWPACKAGE=])

if test -n "$FFTWPACKAGE" ; then
	FFTWINCLUDE="$FFTWPACKAGE/include"
	FFTW_H="$FFTWINCLUDE/fftw.h"
	LIBS="-L$FFTWPACKAGE/lib $LIBS"
fi

AC_CHECK_HEADER($FFTW_H, :, AC_MSG_ERROR(cannot find FFTW header))
AC_CHECK_LIB(fftw, fftw_create_plan, :, AC_MSG_ERROR(cannot use FFTW, library), -lm)

if test -n "$FFTWINCLUDE" ; then
	FFTWINCLUDE="-I$FFTWINCLUDE"
fi
AC_SUBST(FFTWINCLUDE)

dnl
dnl end of FFTW check
dnl----------------------------------------------------------------

dnl----------------------------------------------------------------
dnl Checks for compiler features.

AC_MSG_RESULT(----- Compiler Feature Checks -----)
dnl Check for a definition of M_PI in cmath, if not use our own.
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_MSG_CHECKING(for M_PI defined in cmath)
AC_TRY_COMPILE([ #include <cmath>;], [double pi = M_PI;], [
	HAVE_M_PI=true ], [
	HAVE_M_PI=false ] )

if "$HAVE_M_PI"; then
	AC_MSG_RESULT(yep)
	AC_DEFINE(HAVE_M_PI)
else
	AC_MSG_RESULT(nope using local definition of pi)
fi

dnl restore this
AC_LANG_RESTORE

dnl----------------------------------------------------------------
dnl Check for scripting languages
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Language Checks -----)

dnl----------------------------------------------------------------
dnl Look for Python
dnl----------------------------------------------------------------

PYINCLUDE=
PYPACKAGE=
SITEPY=

AC_ARG_WITH(py,[  --with-py=path          Set prefix of Python installation],[
	PYPACKAGE="$withval"], [PYPACKAGE=])
AC_ARG_WITH(pyincl,[  --with-pyincl=path      Set path to Python header (Python.h)],[
	PYINCLUDE="$withval"], [PYINCLUDE=])

AC_MSG_CHECKING(for Python header files)

dnl if the header path has been specified, verify that it exists
if test -n "$PYINCLUDE" ; then
	if test -f "$PYINCLUDE" ; then 
		dnl this is really dumb, I cannot figure out
		dnl how to remove the filename from the string!
		AC_MSG_ERROR(please specify the directory containing Python.h)
	fi
	if test -d "$PYINCLUDE" ; then
		AC_MSG_RESULT($PYINCLUDE)
	else
		AC_MSG_ERROR(cannot find specified Python header $PYINCLUDE)
	fi
fi

dnl if no path was specified for the Python header, look
dnl for one in likely places, including a package path, if
dnl one was specified
pythondist=
if test -z "$PYINCLUDE" ; then
	if test -n "$PYPACKAGE" ; then :
		pack="$PYPACKAGE"
	else
		pack="/usr/local /usr"
	fi
	for path in $pack ; do
		dnl AC_MSG_CHECKING(for Python distribution with prefix $path)
		dist="python2.2 python2.1 python2.0 python1.6 python1.5"
		for d in $dist ; do
			if test -f "$path/include/$d/Python.h" ; then
				PYINCLUDE="$path/include/$d"
				AC_MSG_RESULT($PYINCLUDE)
				pythondist=$d
				break
			fi
		done
		if test -n "$PYINCLUDE" ; then
			break
		fi
	done
	if test -z "$PYINCLUDE" ; then
		AC_MSG_ERROR(cannot find any of $dist in $pack)
	fi	
fi

if test -z "$PYPACKAGE"; then
	if test -n "$PYINCLUDE" ; then
		PYPACKAGE="$PYINCLUDE/.."
	fi
fi

AC_PATH_PROGS(PYTHON, python python2.2 python2.1 python2.0 python1.6 python1.5, :, $PYPACKAGE/bin:$PATH)

AC_MSG_CHECKING(for where to install Python site packages)
# this is still far from perfect
AC_ARG_WITH(sitepy,[  --with-sitepy=path      Set path to install Python site packages],[
	SITEPY="$withval"
	if test "$SITEPY" == "yes" ; then
		SITEPY=`$PYTHON -c "import sys,string; s=string.join(sys.path,'\n'); print s" | grep site-`
	fi
	if test -z "$SITEPY" ; then
		AC_MSG_ERROR(cannot determine where to put Python site packages)
	fi 
	AC_MSG_RESULT($SITEPY) ], [
	SITEPY=
	AC_MSG_RESULT(do not use site packages directory) ])

AM_CONDITIONAL(BUILD_PYTHON, test -n "$PYINCLUDE")
AM_CONDITIONAL(HAVE_SITEPY, test -n "$SITEPY")

if test -n "$PYINCLUDE" ; then
	PYINCLUDE="-I$PYINCLUDE"
fi
AC_SUBST(PYINCLUDE)
AC_SUBST(SITEPY)

dnl--------------------------------------------------------------------
dnl	Try to locate the Tcl package
dnl--------------------------------------------------------------------

TCLINCLUDE=
TCLPACKAGE=
FOUND_TCL_H=false

AC_ARG_WITH(tcl,[  --with-tcl=path         Set location of Tcl package],[
	TCLPACKAGE="$withval"], [TCLPACKAGE=])
AC_ARG_WITH(tclincl,[  --with-tclincl=path     Set location of Tcl include directory],[
	TCLINCLUDE="$withval"], [TCLINCLUDE=])
	
if test -z "$TCLINCLUDE"; then
   if test -n "$TCLPACKAGE"; then
	TCLINCLUDE="$TCLPACKAGE/include"
   fi
fi

if test -f "$TCLINCLUDE" ; then
	dnl this is really dumb, I cannot figure out
	dnl how to remove the filename from the string!
	AC_MSG_ERROR($TCLINCLUDE: please specify the directory containing tcl.h)
fi
	
AC_MSG_CHECKING(for Tcl header file)
if test -z "$TCLINCLUDE"; then
	AC_TRY_CPP([#include <tcl.h>], [
		AC_MSG_RESULT(found it in default include path)
		FOUND_TCL_H=true ], [
		AC_MSG_RESULT(cannot find tcl.h in default include path, not building Tcl module)
		FOUND_TCL_H=false ] )
fi

if test -n "$TCLINCLUDE" ; then
	AC_TRY_CPP([#include <$TCLINCLUDE/tcl.h>], [
		AC_MSG_RESULT(found it in $TCLINCLUDE)
		FOUND_TCL_H=true ], [
		AC_MSG_RESULT(cannot find tcl.h in $TCLINCLUDE, not building Tcl module)
		TCLINCLUDE=""
		FOUND_TCL_H=false ] )
fi

if test -z "$TCLPACKAGE"; then
	if test -n "$TCLINCLUDE" ; then
		TCLPACKAGE="$TCLINCLUDE/.."
	fi
fi

AM_CONDITIONAL(BUILD_TCL, test "$FOUND_TCL_H" = true)

if "$FOUND_TCL_H"; then
	AC_PATH_PROGS(TCL, tclsh tclsh8.3 tclsh8.2, :, $TCLPACKAGE/bin:$PATH)
	if test -n "$TCLINCLUDE" ; then
		TCLINCLUDE="-I$TCLINCLUDE"
	fi
	AC_SUBST(TCLINCLUDE)
fi

dnl----------------------------------------------------------------
dnl Look for Perl5
dnl----------------------------------------------------------------
dnl 
dnl 	Don't bother with the Perl module, it is untested.
dnl PERLBIN=
dnl PERLINCLUDE=
dnl 
dnl AC_ARG_WITH(perl5,[  --with-perl5=path       Set location of Perl5 executable],[ 
dnl 	PERLBIN="$withval"], [PERLBIN=])
dnl 
dnl dnl First figure out what the name of Perl5 is
dnl if test -f "$PERLBIN" ; then
dnl 	PERL="$PERLBIN"
dnl else
dnl 	if test -n "$PERLBIN" ; then
dnl 		AC_CHECK_PROGS(PERL, perl5.006 perl5.005 perl5.004 perl5.003 perl5.002 perl5.001 perl5 perl, ,$PERLBIN:$PERLBIN/bin)
dnl 	else
dnl 		AC_CHECK_PROGS(PERL, perl5.006 perl5.005 perl5.004 perl5.003 perl5.002 perl5.001 perl5 perl)	
dnl 	fi
dnl fi
dnl 
dnl if test -z "$PERL" ; then
dnl 	AC_MSG_WARN(could not figure out how to run perl5)
dnl 	PERLINCLUDE=
dnl fi 
dnl 
dnl if test -n "$PERL"; then
dnl 	AC_MSG_CHECKING(for Perl5 header files)
dnl 	PERL5DIR=`($PERL -e 'use Config; print $Config{archlib};') 2>/dev/null`
dnl 	if test -n "$PERL5DIR" ; then
dnl 		dirs="$PERL5DIR $PERL5DIR/CORE"
dnl 		for i in $dirs; do
dnl 			if test -f $i/perl.h; then
dnl 				AC_MSG_RESULT($i)
dnl 				PERLINCLUDE="$i"
dnl 				break;
dnl 			fi
dnl 		done
dnl 		if test -z "$PERLINCLUDE" ; then
dnl 			AC_MSG_RESULT(could not locate perl.h.)
dnl 		fi
dnl 	else
dnl 		AC_MSG_RESULT(unable to determine perl5 configuration)
dnl 	fi
dnl fi
dnl 
dnl if test -n "$PERLINCLUDE" ; then
dnl 	PERLINCLUDE="-I$PERLINCLUDE"
dnl fi
dnl AC_SUBST(PERLINCLUDE)

dnl----------------------------------------------------------------
dnl Check for Loris debugging flag
dnl----------------------------------------------------------------
AC_ARG_ENABLE(debugloris, [  --enable-debugloris      Enable internal Loris debugging code (not recommended)],[
	DEBUG_LORIS="$enableval" ], [DEBUG_LORIS=] )

if test -n "$DEBUG_LORIS"; then
	if test "$DEBUG_LORIS"="yes"; then
		AC_MSG_RESULT(enabling debugging code (defining Debug_Loris))
		DEBUG_LORIS="-DDebug_Loris"
	else
		AC_MSG_RESULT(enabling debugging code (defining Debug_Loris to $DEBUG_LORIS))
		DEBUG_LORIS="-DDebug_Loris=$DEBUG_LORIS"
	fi
	AC_SUBST(DEBUG_LORIS)
fi

dnl----------------------------------------------------------------
dnl Generate Makefiles
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Creating Output Files -----)

AC_OUTPUT(Makefile doc/Makefile Makefile src/Makefile \
mac/Makefile pi/Makefile scripting/Makefile csound/Makefile \
test/Makefile )

AC_MSG_RESULT(----- End Of Configuration -----)
