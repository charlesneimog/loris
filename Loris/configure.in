dnl Copyright (C) 1999-2004, Kelly Fitz and Lippold Haken <loris@cerlsoundgroup.org>
dnl  
dnl This file is free software; as a special exception the author gives
dnl unlimited permission to copy and/or distribute it, with or without 
dnl modifications, as long as this notice is preserved.
dnl 
dnl This program is distributed in the hope that it will be useful, but
dnl WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
dnl implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.


dnl initialization
AC_INIT(Loris, 1.2.0, loris@cerlsoundgroup.org, loris)

AC_CONFIG_AUX_DIR(config)
AC_SUBST(ac_aux_dir)
AM_INIT_AUTOMAKE(1.6)
AM_CONFIG_HEADER(config.h)

dnl----------------------------------------------------------------
dnl Package Name And Version
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Package Name And Version -----)

AC_MSG_RESULT(this is $PACKAGE_STRING)

dnl Create loris.h from loris.h.in, subsituting the 
dnl values of the version macros.
dnl Make sure these are consistent with the version number
dnl in AC_INIT above!
LORIS_MAJOR_VERSION=1
LORIS_MINOR_VERSION=2
LORIS_SUBMINOR_VERSION=0
LORIS_PRERELEASE_STR="beta5"
LORIS_VERSION_STR="$PACKAGE_STRING$LORIS_PRERELEASE_STR"
AC_SUBST(LORIS_MAJOR_VERSION)
AC_SUBST(LORIS_MINOR_VERSION)
AC_SUBST(LORIS_SUBMINOR_VERSION)
AC_SUBST(LORIS_VERSION_STR)
AC_CONFIG_FILES([src/loris.h])

dnl----------------------------------------------------------------
dnl Checks for programs.
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Program Checks -----)
AC_PROG_CXX
AM_PROG_LIBTOOL

dnl----------------------------------------------------------------
dnl Perform special libtool checks under Darwin.
dnl----------------------------------------------------------------

AC_DEFUN([PATCH_LIBTOOL_ON_DARWIN_ZSH_OVERQUOTING],
[# libtool-1.4 specific, on zsh target the final requoting does one too much
case "$host_os" in
  darwin*)
    if grep "1.920" libtool ; then
AC_MSG_RESULT(patching libtool on .so-sharedlib creation (zsh overquoting))
      test -f libtool.old || (mv libtool libtool.old && cp libtool.old libtool)
      sed -e '/archive_cmds=/s:\\\\":\\":g' libtool > libtool.new
      mv libtool.new libtool
      test -f libtool || (test -f libtool.old && mv libtool.old libtool)
    fi
  ;;
esac
])
PATCH_LIBTOOL_ON_DARWIN_ZSH_OVERQUOTING

AC_DEFUN([KELLYS_GREAT_DARWIN_FIX],
[# libtool just won't build the scripting modules under Darwin, do it by hand
case "$host_os" in
  *darwin*)
	AC_MSG_RESULT(Using Darwin-specific kludges to avoid broken libtool.)
	DARWIN=true
	;;
esac
])

KELLYS_GREAT_DARWIN_FIX
AM_CONDITIONAL(DARWIN, test "$DARWIN")

dnl----------------------------------------------------------------
dnl Look for csound.
dnl
dnl If csound is available, then a message will be printed
dnl refering to the README in the csound directory.
dnl----------------------------------------------------------------

CSINCLUDE=
AC_ARG_WITH(csound,
	AC_HELP_STRING( [--with-csound=Csound_src_path],
					[specify path of the Csound source code] ),
	[CSINCLUDE="$withval"], [CSINCLUDE=])

AC_PATH_PROG(CSOUND, csound)
AM_CONDITIONAL(HAVE_CSOUND, test -n "$CSINCLUDE")

if test -n "$CSOUND" && test -z "$CSINCLUDE"; then
	dnl if Csound is found, but no path to the source is
	dnl specified, print a message about building the 
	dnl dynamically-loaded module.
	AC_MSG_RESULT(-----------------------------------------)
	AC_MSG_RESULT(You have Csound installed but you did)
	AC_MSG_RESULT(not specify a path to the Csound source)
	AC_MSG_RESULT(so the Loris Csound module cannot be)
	AC_MSG_RESULT(built. Specify a path to the Csound)
	AC_MSG_RESULT(source using configure --with-csound)
	AC_MSG_RESULT(or see the README file in the csound)
	AC_MSG_RESULT(directory for information about building)
	AC_MSG_RESULT(the Loris Csound modules.)
	AC_MSG_RESULT(-----------------------------------------)
fi

if test  "$CSINCLUDE" == "yes"; then
	dnl report that this flag requires a path
	AC_MSG_ERROR(please specify a path to the Csound source when using --with-csound)
fi

if test -n "$CSINCLUDE"; then
	dnl verify that the header cs.h can be found in 
	dnl the specified directory
	AC_MSG_CHECKING(for cs.h header file)
	if test ! -f "$CSINCLUDE/cs.h" ; then
		AC_MSG_ERROR(cannot find cs.h in $CSINCLUDE)
	fi
	AC_MSG_RESULT(found $CSINCLUDE/cs.h)
fi

AC_SUBST(CSINCLUDE)

dnl----------------------------------------------------------------
dnl Checks for compiler features.

AC_MSG_RESULT(----- Compiler Feature Checks -----)
AC_LANG_SAVE
AC_LANG_CPLUSPLUS

dnl SIZEOF buildin integer types, min is the minmimum according ISO
dnl SIZEOF_BOOL
AC_CHECK_SIZEOF(bool)
dnl SIZEOF_CHAR, min = 1
AC_CHECK_SIZEOF(char)
dnl define __CHAR_UNSIGNED__ , unless defined by compiler
AC_C_CHAR_UNSIGNED
dnl SIZEOF_SHORT, min = 2
AC_CHECK_SIZEOF(short)
dnl SIZEOF_INT, min = 4
AC_CHECK_SIZEOF(int)
dnl SIZEOF_LONG, min = 4
AC_CHECK_SIZEOF(long)
dnl assign default, if not defined
dnl AC_CHECK_TYPE([long long], long)
dnl AC_CHECK_TYPE([unsigned long long], [unsigned long])
dnl SIZEOF_LONG_LONG, 0 if undefined
dnl AC_CHECK_SIZEOF([long long])
dnl SIZEOF_INT_P
AC_CHECK_SIZEOF(int *) 
dnl SIZEOF_SIZE_T
AC_CHECK_SIZEOF(size_t) 

dnl SIZEOF_FLOAT, should always be 4 I think
AC_CHECK_SIZEOF(float)
dnl SIZEOF_DOUBLE, should always be 8 I think
AC_CHECK_SIZEOF(double)

dnl Check for endian-ness of system.
AC_C_BIGENDIAN()

dnl Check for a definition of M_PI in cmath, if not use our own.
AH_TEMPLATE([HAVE_M_PI],
            [Define 1 if M_PI defined in cmath, 0 otherwise.])
AC_MSG_CHECKING(for M_PI defined in cmath)
AC_TRY_COMPILE([ #include <cmath>;], [double pi = M_PI;], [
	AC_MSG_RESULT(yep)
	AC_DEFINE([HAVE_M_PI], 1) ], [
	AC_MSG_RESULT(nope using local definition of pi)
	AC_DEFINE([HAVE_M_PI], 0) ] )


dnl check whether template member functions should
dnl be used
AH_TEMPLATE([NO_TEMPLATE_MEMBERS],
            [Define for compilers that do not support template member functions.])
AC_MSG_CHECKING(whether C++ compiler supports template member functions)
AC_COMPILE_IFELSE([
	AC_LANG_SOURCE([[
		#include <vector>
		struct C
		{
			int z;
			template< class T >
			C( T b, T e ) : z( e-b ) {}
		};]], [[
		std::vector< int > v(100, 1);
		C c( v.begin(), v .end() );
		return 0;
		]])], [
	AC_MSG_RESULT(yes)], [
	AC_MSG_RESULT(no, not using template members)
	AC_DEFINE([NO_TEMPLATE_MEMBERS])])

dnl check whether the compiler can handle Alexandrescu's compile-time
dnl assertions, which we use later to make sure that std::complex<double>
dnl and fftw_complex are identical:
AH_TEMPLATE([NO_COMPILE_TIME_ASSERTIONS],
            [Define for compilers that do not support compile-time assertions.])
AC_MSG_CHECKING(whether compiler supports compile-time assertions)

AC_COMPILE_IFELSE( 
	AC_LANG_SOURCE([[
		//	Gnarly code adopted from Alexandrescu (Modern C++ Design) for compile-time
		//	checking of type information. 
		template<int> struct CompileTimeError;
		template<> struct CompileTimeError<true> {};
		#define STATIC_CHECK(expr, msg) \
			{ CompileTimeError<((expr) != 0)> ERROR_##msg; (void)ERROR_##msg; }
		
		template <class T, class U> struct CompareTypes { enum { same = 0 }; };
		template<class T> struct CompareTypes<T, T> { enum { same = 1 }; };
		typedef int INT;
		void f(void)
		{
			STATIC_CHECK((CompareTypes<int, INT>::same!=0), COMPILE_TIME_ASSERTIONS_FAIL);
			STATIC_CHECK((CompareTypes<int, float>::same==0), COMPILE_TIME_ASSERTIONS_FAIL);
		}
  ]]),[
  NO_COMPILE_TIME_ASSERTIONS=false
  AC_MSG_RESULT(yes) ], [
  NO_COMPILE_TIME_ASSERTIONS=true
  AC_MSG_RESULT(no)
  AC_DEFINE([NO_COMPILE_TIME_ASSERTIONS])
  ] )

dnl restore this
AC_LANG_RESTORE

dnl----------------------------------------------------------------
dnl Check for librairies
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Library Checks -----)

dnl----------------------------------------------------------------
dnl Look for FFTW
dnl
dnl Remember that fftw library won't link without -lm.
dnl Allow an argument to specify the prefix of a non-installed
dnl FFTW package
dnl----------------------------------------------------------------

FFTWPACKAGE=
FFTWINCLUDEDIR=
FFTWLIBDIR=

FFTW_HEADER=
FFTW_LIB=

AC_ARG_WITH(fftw,
	AC_HELP_STRING( [--with-fftw=path],
					[specify the prefix of the FFTW  package] ),
	[FFTWPACKAGE="$withval"], [FFTWPACKAGE=])
	

dnl save the state of the CPPFLAGS and LIBS
SAVE_CPP_FLAGS="$CPPFLAGS"
SAVE_LIBS="$LIBS"

if test -n "$FFTWPACKAGE" ; then
dnl	search the specified FFTW package path for
dnl	a usable FFTW header and library

	dnl identify include directory
	if test -d "$FFTWPACKAGE/include" ; then
		FFTWINCLUDEDIR="$FFTWPACKAGE/include"
	else
		FFTWINCLUDEDIR="$FFTWPACKAGE"
	fi

	dnl identify lib directory
	if test -d "$FFTWPACKAGE/lib" ; then
		FFTWLIBDIR="$FFTWPACKAGE/lib"
	else
		FFTWLIBDIR="$FFTWPACKAGE"
	fi
	
	dnl look in include directory for one of the FFTW headers
	if test -f "$FFTWINCLUDEDIR/fftw3.h" ; then
		FFTW_HEADER="fftw3.h"
		FFTW_LIB="fftw3"
		FFTW_MAKE_PLAN="fftw_plan_dft_1d"
	else
		if 	test -f "$FFTWINCLUDEDIR/fftw.h" ; then
			FFTW_HEADER="fftw.h"
			FFTW_LIB="fftw"
			FFTW_MAKE_PLAN="fftw_create_plan_specific"
		else
			AC_MSG_ERROR(cannot find any FFTW header in $FFTWINCLUDEDIR)
		fi
	fi
	AC_MSG_RESULT(using $FFTW_HEADER found in $FFTWINCLUDEDIR)
	
	dnl check the usability of the header and library found
	CPPFLAGS="-I$FFTWINCLUDEDIR $CPPFLAGS"
	LIBS="-L$FFTWLIBDIR $LIBS"
	AC_CHECK_HEADERS([$FFTW_HEADER], [
		AC_CHECK_LIB("$FFTW_LIB", $FFTW_MAKE_PLAN, :, AC_MSG_ERROR(cannot use $FFTW_LIB library), -lm)
		],[
		AC_MSG_ERROR(cannot use $FFTW_HEADER header)
		] )
		
else
dnl no FFTW package directory was specified, so try to 
dnl find one in the default path

	AC_CHECK_HEADERS([fftw3.h], [
		FFTW_LIB="fftw3"
		AC_MSG_RESULT(using $FFTW_LIB) 
		AC_CHECK_LIB("$FFTW_LIB", fftw_plan_dft_1d, :, AC_MSG_ERROR(cannot use FFTW3 library), -lm)
		],[
		AC_CHECK_HEADERS([fftw.h], [
			FFTW_LIB="fftw"
			AC_MSG_RESULT(using $FFTW_LIB (version 2)) 
			AC_CHECK_LIB("$FFTW_LIB", fftw_create_plan_specific, :, AC_MSG_ERROR(cannot use FFTW library), -lm)
			] , [
			AC_MSG_ERROR(cannot find any FFTW header) 
			] ) 
		] )
		
fi

INCLUDE_FFTW=
if test -n "$FFTWINCLUDEDIR" ; then
	INCLUDE_FFTW="-I$FFTWINCLUDEDIR"
fi
AC_SUBST(INCLUDE_FFTW)

if test -n "$FFTWLIBDIR" ; then
	LINK_FFTW="-L$FFTWLIBDIR -l$FFTW_LIB"
else
	LINK_FFTW="-l$FFTW_LIB"
fi
AC_SUBST(LINK_FFTW)

dnl Gnarly code adopted from Alexandrescu (Modern C++ Design) for compile-time
dnl checking of type information. Need to make sure that fftw_complex and 
dnl std::complex<double> are the same size and have the same memory layout.
dnl Try to do that at compile-time, much better than doing it at runtime.
dnl Actually, best of all is at configure-time. Only do this if the compiler
dnl can handle compile-time assertions (checked above).
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
if test -n "$NO_COMPILE_TIME_ASSERTIONS"; then
	dnl compiler supports compile-time assertions
	AC_MSG_CHECKING(whether std::complex<double> is same as fftw_complex)
	AC_COMPILE_IFELSE( 
		AC_LANG_SOURCE([[
			#include <complex>
			#if defined(HAVE_FFTW3_H)
			#include <fftw3.h>
			#else
			#include <fftw.h>
			#endif
			//	Gnarly code adopted from Alexandrescu (Modern C++ Design) for compile-time
			//	checking of type information. Need to make sure that fftw_complex and 
			//	std::complex<double> are the same size and have the same memory layout.
			//
			template<int> struct CompileTimeError;
			template<> struct CompileTimeError<true> {};
			#define STATIC_CHECK(expr, msg) \
				{ CompileTimeError<((expr) != 0)> ERROR_##msg; (void)ERROR_##msg; }
			
			template <class T, class U> struct CompareTypes { enum { same = 0 }; };
			template<class T> struct CompareTypes<T, T> { enum { same = 1 }; };
			
			void f(void)
			{
				//	if this won't compile, fftw_real is not defined to be double,
				//	and this class won't work under those conditions:
				#if !defined(HAVE_FFTW3_H)
				//	no fftw_real in FFTW3
				STATIC_CHECK((CompareTypes<double, fftw_real>::same!=0), fftw_real_IS_NOT_DOUBLE);
				#endif
				
				//	if this won't compile, then the two complex types have 
				//	different sizes, and therefore don't have the same memory 
				//	layout, and this FourierTransform class won't work:
				STATIC_CHECK( sizeof(std::complex<double>) == sizeof(fftw_complex), 
							  fftw_complex_DIFFERENT_SIZE_FROM_std_complex_double );
							  
				//	if this doesn't compile, then probably the previous one didn't
				//	compile either, but it doesn't hurt to verify that the layout
				//	of the complex types is trivial:
				STATIC_CHECK( sizeof(fftw_complex) == sizeof(double) + sizeof(double),
							  fftw_complex_LAYOUT_IS_NONTRIVIAL );
			}
	  ]]),[
	  AC_MSG_RESULT(seems so) ], [
	  AC_MSG_RESULT(failed!)
	  AC_MSG_RESULT(-------------------------------------------)
	  AC_MSG_RESULT(Compile-time type checks failed!!!!)
	  AC_MSG_RESULT(This suggests that std::complex<double> and)
	  AC_MSG_RESULT(and fftw_complex do not have the same)
	  AC_MSG_RESULT(size and memory layout, so Loris analysis)
	  AC_MSG_RESULT(will not work!!!)
	  AC_MSG_RESULT(Check config.log, and send email to)
	  AC_MSG_RESULT($PACKAGE_BUGREPORT)
	  AC_MSG_RESULT(if you think this message is an error.)
	  AC_MSG_RESULT(-------------------------------------------)
	  AC_MSG_ERROR(Compile-time type checks failed!!!!)
	  ] )

else
	AC_MSG_RESULT(cannot use compile-time checks to compare std::complex<double> to fftw_complex)
fi


dnl restore this
AC_LANG_RESTORE
CPPFLAGS="$SAVE_CPP_FLAGS"
LIBS="$SAVE_LIBS"

dnl
dnl end of FFTW check
dnl----------------------------------------------------------------

dnl----------------------------------------------------------------
dnl Check for scripting languages
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Language Checks -----)

dnl----------------------------------------------------------------
dnl Look for Python
dnl----------------------------------------------------------------
dnl By default, look for a python binary, and use the header in the
dnl same path. If --with-python is specified, then if the argument is
dnl a file, set the PYTHON environment variable to that value before
dnl searching, otherwise, if the argument is a directory, assume that
dnl it is the prefix for the python installation, and add /bin/python
dnl to it to set the PYTHON environment variable. If --without-python
dnl or --with-python=no is specified, don't use python at all.

AC_ARG_WITH(python,
	AC_HELP_STRING( [--with-python@<:@=path@:>@],
					[build Python module (default is YES) (optionally specify prefix of Python package)] ),
	[USEPY="$withval"], [USEPY="yes"])

PYINCLUDE=
AC_ARG_WITH(pyincl,
	AC_HELP_STRING( [--with-pyincl=path],
					[specify path of the Python.h header] ),
	[PYINCLUDE="$withval"], [PYINCLUDE=])

if test  "$USEPY" != "no"; then
	if test -f "$USEPY"; then
		dnl assume that the python binary was specified
		PYTHON="$USEPY"
	fi
	if test -d "$USEPY"; then
		dnl assume that the python prefix was specified
		PYTHON="$USEPY/bin/python"
	fi
	dnl use automake tools for finding python, set 
	dnl installation directory for extension modules
	AM_PATH_PYTHON(1.5)
	AC_MSG_RESULT(installing Python extension modules in $pyexecdir)
	
	dnl look for the header Python.h
	AC_MSG_CHECKING(for Python.h header file)
	if test -n "$PYINCLUDE" ; then 
		dnl if the header path has been specified, verify 
		dnl that it exists and is a directory
		if test -f "$PYINCLUDE" ; then 
			dnl remove the filename
			PYINCLUDE="`AS_DIRNAME(["$PYINCLUDE"])`"
		fi
		if test ! -f "$PYINCLUDE/Python.h" ; then
			AC_MSG_ERROR(cannot find Python.h in $PYINCLUDE)
		fi
	else
		dnl if the header path was not specified, try
		dnl to infer it from the python binary
		PYINCLUDE="`AS_DIRNAME(["$PYTHON"])`/../include/python$PYTHON_VERSION"  
		if test ! -f "$PYINCLUDE/Python.h" ; then
			AC_MSG_ERROR(cannot find Python.h in $PYINCLUDE please use --with-pyincl=path)
		fi
	fi
	AC_MSG_RESULT(found in $PYINCLUDE)
	
	dnl check whether this version of Python supports
	dnl the new style of iterators
	AC_MSG_CHECKING(for PyExc_StopIteration defined in Python.h)
	AC_TRY_COMPILE(	[ #include <$PYINCLUDE/Python.h>;], 
					[ PyErr_SetString( PyExc_StopIteration, ""); ], 
		[
	    	AC_MSG_RESULT(yep)
			PYINCLUDE="-I$PYINCLUDE"	
	    ], [
	    	AC_MSG_RESULT(nope)
			PYINCLUDE="-I$PYINCLUDE -DNO_PYTHON_EXC_STOPITER"
	    ] )
fi

AM_CONDITIONAL(BUILD_PYTHON, test "$USEPY" != "no")
AC_SUBST(PYINCLUDE)

dnl----------------------------------------------------------------
dnl Check for Loris debugging flag
dnl----------------------------------------------------------------
AC_ARG_ENABLE(debugloris,
	AC_HELP_STRING( [--enable-debugloris],
					[enable internal Loris debugging code (not recommended)] ),
	[DEBUG_LORIS="$enableval" ], [DEBUG_LORIS=] )

AH_TEMPLATE([Debug_Loris],
            [Define to enable internal Loris debugging code (not recommended).])

if test -n "$DEBUG_LORIS"; then
	if test "$DEBUG_LORIS"="yes"; then
		AC_MSG_RESULT(enabling debugging code (defining Debug_Loris))
		AC_DEFINE([Debug_Loris])
	else
		AC_MSG_RESULT(enabling debugging code (defining Debug_Loris to $DEBUG_LORIS))
		AC_DEFINE([Debug_Loris], "$DEBUG_LORIS")
	fi
fi

dnl----------------------------------------------------------------
dnl Generate Makefiles
dnl----------------------------------------------------------------

AC_MSG_RESULT(----- Creating Output Files -----)

AC_OUTPUT(Makefile doc/Makefile src/Makefile \
scripting/Makefile csound/Makefile test/Makefile \
utils/Makefile )

AC_MSG_RESULT(----- End Of Configuration -----)
