#ifndef __INCLUDE_FILTER_H__
#define __INCLUDE_FILTER_H__
/*
 * Copyright (c) 1999-2000 Kelly Fitz and Lippold Haken
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY, without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *
 * Filter.h
 *
 * Definition of class Loris::Filter, a generic ARMA digital filter.
 *
 * Kelly Fitz, 1 Sept 1999
 * loris@cerlsoundgroup.org
 *
 * http://www.cerlsoundgroup.org/Loris/
 *
 */
#include <vector>

#if !defined( NO_LORIS_NAMESPACE )
//	begin namespace
namespace Loris {
#endif


// ---------------------------------------------------------------------------
//	class Filter
//
//	Construct by passing in bounds (STL-style) for MA (x) and AR (y) 
//	coefficient arrays (or vectors), and (optionally) gain, which is 
//	applied to the filter input (defaults to 1.). Coefficients are
//	specified and stored in order of increasing delay.
//
//	Check this out: http://www.cs.york.ac.uk/~fisher/mkfilter/
//	Digital filter designed by mkfilter/mkshape/gencode   A.J. Fisher
//	This web site is the source of the original implementation here, 
//	and it provides a useful tool for configuring Filter objects. Among
//	the many differences between this implementation and the code 
//	generated by mkfilter, the order of the coefficients and delays is
//	reversed.
//
//	Filter is a leaf class, do not subclass.
//	
class Filter
{
//	-- implementation --
	//	delay lines:
	std::vector< double > _xv, _yv;	
		
	//	ARMA coefficients:
	std::vector< double > _maCoefs, _arCoefs;	
	
	//	filter gain (gain applied to input samples)
	double _gain;		
	
	//	circular delay buffer indices, 
	//	current input and output indices:
	int _idxX, _idxY;

//	-- public interface --
public:
//	construction:
	Filter( const double * vcx_begin, const double * vcx_end,
			const double * vcy_begin, const double * vcy_end,
			double gain = 1. );
	
	//	use compiler-generated:
	// ~Filter(void);
		
//	next filtered sample from input sample:				
	double sample( double );
	
//	not implemented (yet):
private:
	Filter( const Filter & other );
	Filter & operator=( const Filter & rhs );

};	//	end of class Filter

#if !defined( NO_LORIS_NAMESPACE )
}	//	end of namespace Loris
#endif

#endif	// ndef __INCLUDE_FILTER_H__
