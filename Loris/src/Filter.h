#ifndef __INCLUDE_FILTER_H__
#define __INCLUDE_FILTER_H__
// ===========================================================================
//	Filter.h
//	
//	Class definition for Loris::Filter, a generic ARMA digital filter.
//
//	Check this out: http://www.cs.york.ac.uk/~fisher/mkfilter/
//	Digital filter designed by mkfilter/mkshape/gencode   A.J. Fisher
//	This web site is the source of the original implementation here, 
//	and it provides a useful tool for configuring Filter objects. Among
//	the many differences between this implementation and the code 
//	generated by mkfilter, the order of the coefficients and delays is
//	reversed.
//
//	-kel 1 Sep 99
//
// ===========================================================================
#include "LorisLib.h"
#include <vector>

Begin_Namespace( Loris )

// ---------------------------------------------------------------------------
//	class Filter
//
//	Construct by passing in bounds (STL-style) for MA (x) and AR (y) 
//	coefficient arrays (or vectors), and (optionally) gain, which is 
//	applied to the filter input (defaults to 1.). Coefficients are
//	specified and stored in order of increasing delay.
//
//	Filter is a leaf class, do not subclass.
//	
class Filter
{
//	-- implementation --
	//	delay lines:
	std::vector< double > _xv, _yv;	
		
	//	ARMA coefficients:
	std::vector< double > _maCoefs, _arCoefs;	
	
	//	filter gain (gain applied to input samples)
	double _gain;		
	
	//	circular delay buffer indices, 
	//	current input and output indices:
	int _idxX, _idxY;

//	-- public interface --
public:
//	construction:
	Filter( const double * vcx_begin, const double * vcx_end,
			const double * vcy_begin, const double * vcy_end,
			double gain = 1. );
	
	//	use compiler-generated:
	// ~Filter(void);
		
//	next filtered sample from input sample:				
	double sample( double );
	
//	not implemented (yet):
private:
	Filter( const Filter & other );
	Filter & operator=( const Filter & rhs );

};	//	end of class Filter

End_Namespace( Loris )

#endif	// ndef __INCLUDE_FILTER_H__