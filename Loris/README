This is Loris 1.0beta4.

Loris is an Open Source C++ class library implementing analysis,
manipulation, and synthesis of digitized sounds using the Reassigned
Bandwidth-Enhanced Additive Sound Model. Loris supports modified
resynthesis and manipulations of the model data, such as time- and
frequency-scale modification and sound morphing. Loris includes
support and wrapper code for building extension modules for various
scripting languages (Python, Tcl, Perl).

Loris is developed by Kelly Fitz and Lippold Haken at the CERL Sound
Group (http://www.cerlsoundgroup.org), with contributions from Paul
Christensen. IEEE floating point conversion code was provided by
Malcolm Slaney and Ken Turkowski. Reference-counted "smart pointer"
code provided by Vladimir Batov.

For more information about Loris and the Reassigned Bandwidth-Enhanced
Additive Model, contact the developers at loris@cersloundgroup.org, or
visit them at http://www.cerlsoundgroup.org/Loris/.

The primary distribution point for Loris is SourceForge
(http://loris.sourceforge.net) and its mirrors.

See the bottom of this document for a list of major changes orgrnized 
by release number.

DIRECTORIES:

Loris/classes - the Loris C++ class library.

Loris/demo - a simple sound morphing demonstration using a Loris
extension module to the Python scripting language. (Loris demo 
download only)

Loris/demo/morphdemo.out - sample output from the sound morphing
demonstration script (sanity check). (Loris demo download only)

Loris/doc - documentation in html format (only for the
c-linkable procedural interface and the Python interface).

Loris/lib - target directory for library and scripting module
builds.

Loris/mac - Metrowerks Codewarrior project for building Loris 
under MacOS, distributed as an exported XML file. (Loris mac 
download only)

Loris/pi - the c-linkable procedural interface to the Loris
C++ classes. Includes the Makefile for building the Loris
library.

Loris/scripting - SWIG (www.swig.org) interface files for building
a scripting interface to the Loris library. Includes a Makefile and 
wrappers for building Loris modules for Python, Tcl, and Perl. 
SWIG is not required for building the these modules.

Loris/test - scripts and sources used for testing and verifying the
behavior of the Loris library and scripting interfaces.

INSTALLATION: 

In order to compile and link the Loris library and scripting
extensions, you will need the FFTW Fourier transform routines,
available at www.fftw.org, and the SDIF (Sound Description
Interchange Format) data formatting routines, available at
www.ircam.fr/sdif. FFTW and SDIF are covered by their own 
licenses and copyrights, and are entirely separate from Loris.

Loris Makefiles and projects look for the FFTW and SDIF headers and
libraries on their default installed locations (/usr/local/include and
/usr/local/lib, respectively,  on UNIX systems). You may need to
change your Makefiles or projects if you install these packages in
some other configuration.

The CodeWarrior project for MacOS includes a target for building 
the FFTW library and installing it in the Extensions folder. The
CodeWarrior project assumes that the fftw--2.1.3 folder is at the
same level as the CodeWarrior folder. If you put it somewhere 
else, you will have to change the Access Paths for your project.

SDIF:

Loris supports a bandwidth-enhanced version of the SDIF 1TRC format
that is described in the SdifTypes.STYP file in Loris/lib. Until this 
matrix format becomes part of the SDIF standard (real soon now), it
is necessary to replace the SdifTypes.STYP file in the standard 
distribution with the file in Loris/lib, or to set the SDIFTYPES 
environment variable, as described in the tutorial material on the
IRCAM SDIF website (www.ircam.fr/sdif). 

Loris currently uses version 3.2.2 or 3.3 of the SDIF library. This
version is incompatible with the version 3.2.0 (used by previous
releases of Loris), and there is no way to detect at compile-time which
version of the SDIF library (and header, sdif.h) is being included.
Loris, therefore, assumes that version 3.2.2 or newer is being used
unless the flag SDIF_VERSION is set to 320, in which case version 3.2.0
is assumed. We anticipate a better solution in the near future.

IRCAM's SDIF library is provided in binary form for MacOS (Classic),
and can be installed by simply putting the library in the Extensions 
folder, and the header somewhere that CodeWarrior can find it. The 
CodeWarrior project assumes that the SDIF binary distribution folder 
at the same level as the Codewarrior folder. If you put it somewhere 
else, you will have to change the Access Paths for your project.

COMPATIBILITY:

Loris has been tested on various UNIX systems using gcc-2.95.2 and
MacOS 9.x using Metrowerks Codewarrior Pro 5.3 and 6.0. It has also
reportedly been built using Cygwin, a gcc port for Windows
(http://sources.redhat.com/cygwin/). It should compile with any
reasonably standard-compliant compiler.

Loris does not perform well under Darwin/MacOS X. For unknown reasons,
the FFTW library runs very slowly under Darwin. Also, dynamically loaded
libraries (like the scripting modules) are different and incompatible
under Darwin. We are working on solutions for these problems.

The Loris module for Python has been tested using Python 1.5.2, 1.6,
2.0, and 2.1. The Tcl module has been tested using Tcl 8.3. The Perl
module has been built for Perl 5, but is awaiting testing by a qulaified
Perl programmer. The Makefile in the scripting directory must be altered
to reflect the version and path of your scripting headers and libraries.

The CodeWarrior project for MacOS is provided as an exported XML project
description, and should be importable by any version of CodeWarrior
since version 5. Use the Import Project option on the File menu.


COPYRIGHT AND LICENSE:

Loris is Copyright (c) 1999-2000 Kelly Fitz and Lippold Haken.

Loris is free software, as defined by the Free Software Foundation,
and is distributed under the terms of the GNU General Public License.
See the COPYRIGHT and LICENSE documents.

MAJOR CHANGES:

change since 1.0beta3 release:

- Tcl and Perl interfaces and documentation have been added to the
scripting support. The Tcl module can be tested using the morphtest.tcl
script in the test directory. The Perl module has not been tested yet
and is awaiting a competent Perl programmer to provide a Perl version of
the test script.

- the macro LORIS_VERSION has been added to a prefix file included in
all Loris headers and sources. So it is now possible to determine the
Loris release version programmatically and at compile time. See the
header Loris_prefix.h for a description of the format of this macro. The
Loris version is also accessible using the versionString function in the
scripting interface.

- the PartialList and Partial iterators in the scripting interface have
been rewritten and now mimic the C++ STL classes they wrap. Most
importantly, iterators do _no_ memory or reference management. So that
in Python, if you loose the last reference to a PartialList and the list
gets deleted, you may be left with invalid Partials, Iterators, and
Breakpoints, that formerly corrsponded to contents of that PartialList.
See the documentation for more details. This implementation is very
different from the implementation in release 1.0beta3, but is more or
less the one that we expect to stick with.

- the non-object functions in the scripting interface for accessing AIFF
format sample files (ImportAiff, and infoAiff) have been removed. Use the 
AiffFile class added in the previous release. See the test and demo scripts
for examples.

- the ExportSpc class has been removed from the scripting interface and
replaced by non-object importSpc and exportSpc functions. See the
documenation for details. In the C++ class library the ExportSpc class
has been replaced by the SpcFile class, the ImportSdif and ExportSdif
classes have been replaced by the SdifFile class.

- the CodeWarrior project itself is no longer distributed for the MacOS.
Instead, the exported XML description is distributed. This file can be
used to build (mostly) a CodeWarrior project using any recent version of
the IDE, using the Import Project option on the File menu.

change since 1.0beta2 release:

- preliminary implementation of PartialList iteration and access to
individual Partials in a PartialList in the scripting interface. This
implementation is incomplete and experimental, and should be expected
to change.

- AiffFile class added to scripting interface, so there is no longer a
separate function (and disk access) for querying the sample rate, bit
depth, and number of channels in a samples file. These parameters are
now obtained from an AiffFile object that also provides access to the
SampleVector.

- Sieve class has been added to Loris class library, invoked through
sift() function in the scripting interface. The sifting operation is
an experimental process that sometimes improves the fidelity of morphs
and syntheses from distilled PartialLists. Sifting is performed after
channelization and before distillation, and has the effect of
relabeling some Partials to zero (0). These Partials are left behind
unmodified by the distillation process, and can be removed from the
PartialList, or retained and synthesized. (Partials labeled zero do
not participate in morphing, they are instead faded in and out.) This
implementation is experimental and should be expected to change.

- errors in test and demo scripts have been fixed.

- Python interface documentation has been updated and improved.

- updated to use the version 3.2.2 of the SDIF library from IRCAM,
obtain from the IRCAM SDIF website (www.ircam.fr/sdif). This version
is incompatible with version 3.2.0, used in by earlier Loris releases.
Update to version 3.2.2, or compile with the flag SDIF_VERSION defined
to have the value 320 to use version 3.2.0 of the SDIF library. See
the README file or more information.

- SWIG 1.3a5 is being used to generate the Python wrappers now, so
anyone wishing to try generating wrappers for other languages can now
choose from Java, Guile, Ruby, and others, in addition to Tcl and Perl.

- other minor changes in the scripting interface, see the demo and
test scripts for examples. 

change since 1.0beta1 release:

- added .spc file support for real-time bandwidth-enhanced additive
synthesis and sound morphing using the Symbolic Sound Kyma System.
Documentation updated accordingly (though not very extensive).

- Loris module tested and verified with Python 2.0, now the default
build (to build or another Python release, change the Makefile, or,
in the MacOS Codewarrior project, the Access Path, to reflect the 
correct version number).

- static library target added to Codewarrior project for MacOS.

- MacOS Python module now uses a static library instead of a shared 
libarary (DLL), since static libraries seem much more stable and are
less restrictive. (This should alleviate some instability related to
memory management across library boundaries.)

- test directory has been added with the simple morph test, distinct
from the longer test in the demo directory (and package).

changes since 1.0alpha release:

- the core Loris library is mostly unchanged from the alpha release,
but the scripting interface has been completely rewritten to provide
a generic interface to a variety of scriping languages using SWIG
(www.swig.org) At this time, only the Python module has been
tested, and only with Python 1.5.2, though Loris is also reported to
work with Python 1.6.

- a c-linkable procedural interface has been implemented.

- a first-cut of (html) documentation for the procedural interface and
for the Python module is included, and posted to SourceForge
(sourceforge.net/projects/loris).
